// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"

#include "GameFramework/GameState.h"
#include "SMLGameState.generated.h"

enum class ECraftScale : uint8;
class ARespawnPoint;
class ADamageableCharacter;

USTRUCT(BlueprintType)
struct FSpawnableClass
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TSubclassOf<ADamageableCharacter> Class; //Class to be spawned as
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 Count; //Maximum number of players allowed or number available
};

USTRUCT(BlueprintType)
struct FSpawnedClasses
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int32> SpawnedAmount; //SpawnedAmount[i] is the number spawned of for team i

	FSpawnedClasses()
        : SpawnedAmount()
	{
	}
	
	FSpawnedClasses(const TArray<int32>& SpawnedAmount)
		: SpawnedAmount(SpawnedAmount)
	{
	}
};

/*
 * This is generated by GetSpawnableTeams
 */
USTRUCT(BlueprintType)
struct FSpawnableTeam
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 TeamIndex; //Index of the team
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 NumPlayers; //Number of players on the team
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FText TeamName; //Name to display the team as

	FSpawnableTeam()
            : TeamIndex(0),
              NumPlayers(0),
              TeamName()
	{
	}
	
	FSpawnableTeam(int32 InTeamIndex, int32 InNumPlayers, const FText& InTeamName)
		: TeamIndex(InTeamIndex),
		  NumPlayers(InNumPlayers),
		  TeamName(InTeamName)
	{
	}
};

/**
 * 
 */
UCLASS(BlueprintType, Blueprintable)
class SMLTEST_API ASMLGameState : public AGameState
{
	GENERATED_BODY()
	
private:
	UPROPERTY(EditAnywhere, Replicated)
	TArray<FSpawnableClass> SpawnableClasses; //Used to declare the available classes and their amount per team

	UPROPERTY(EditAnywhere, Replicated, BlueprintGetter=GetNumTeams)
	int32 NumTeams;

	UPROPERTY(EditAnywhere, Replicated)
	TArray<FSpawnedClasses> SpawnedClasses; //Keeps track of the number of spawned characters for each team

protected:
	UPROPERTY(EditAnywhere, Replicated)
	TArray<ARespawnPoint*> SpawnPoints; //This array automatically get populated server by the spawn points
	
public:
	UFUNCTION(BlueprintPure)
	int32 GetNumTeams() const
	{
		return NumTeams;
	}
	
protected:
	virtual void BeginPlay() override;

public:
	
	virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;

	UFUNCTION(BlueprintCallable)
	virtual TArray<FSpawnableClass> GetSpawnableClasses(int32 TeamIndex); //Get all the classes that can be spawned as

	UFUNCTION(BlueprintCallable)
	virtual TArray<FSpawnableTeam> GetSpawnableTeams();

	UFUNCTION(BlueprintCallable)
	virtual TArray<ARespawnPoint*> GetSpawnPoints(int32 TeamIndex, TSubclassOf<ADamageableCharacter> Class);

	friend ARespawnPoint;
};
